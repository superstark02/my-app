{"version":3,"sources":["images/meera_sight.gif","images/wallpaper_website.webp","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","head_paper","flexWrap","alignContent","borderBottom","borderBottomColor","borderBottomWidth","button","marginTop","header_button","borderRadius","backgroundColor","paddingRight","paddingLeft","App","classes","className","Paper","elevation","CssBaseline","Container","maxWidth","Typography","component","style","src","Logo","height","width","Button","variant","color","wall_paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,gD,0PCWrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,WAAY,CACVC,SAAS,OACTC,aAAa,SACbC,aAAa,QACbC,kBAAkB,UAClBC,kBAAkB,SAEpBC,OAAQ,CACNC,UAAU,OAEZC,cAAc,CACZC,aAAa,IACbC,gBAAgB,QAChBC,aAAa,MACbC,YAAY,WA0DDC,MAtDf,WACE,IAAMC,EAAUjB,IAChB,OACE,yBAAKkB,UAAU,OAEd,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGF,UAAWD,EAAQd,YAExC,kBAACkB,EAAA,EAAD,MACC,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAYC,UAAU,MAAMC,MAAO,CAACtB,SAAS,SAC9C,yBAAKuB,IAAKC,IAAMF,MAAO,CAAEG,OAAO,OAAQC,MAAM,OAAOpB,UAAU,WAI/D,kBAACW,EAAA,EAAD,MACD,kBAACC,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAYC,UAAU,MAAMC,MAAO,CAACtB,SAAS,SAE7C,yBAAKc,UAAWD,EAAQR,QACxB,kBAACsB,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUf,UAAWD,EAAQN,eAA9D,QAGF,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,WAAWd,UAAWD,EAAQN,cAAesB,MAAM,WAAnE,YAGA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,WAAWd,UAAWD,EAAQN,cAAesB,MAAM,WAAnE,QAGA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,WAAWd,UAAWD,EAAQN,cAAesB,MAAM,WAAnE,UAGA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,WAAWd,UAAWD,EAAQN,cAAesB,MAAM,WAAnE,SAGA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,WAAWd,UAAWD,EAAQN,cAAesB,MAAM,WAAnE,kBAQD,kBAACZ,EAAA,EAAD,MACC,kBAACC,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAYC,UAAU,MAAMC,MAAO,CAACtB,SAAS,SAC3C,yBAAKuB,IAAKO,IAAYR,MAAO,CAACI,MAAM,OAAQD,OAAO,cC/DzCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53d11b56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/meera_sight.37a834ad.gif\";","module.exports = __webpack_public_path__ + \"static/media/wallpaper_website.30e79416.webp\";","import React from 'react';\nimport './App.css';\nimport Logo from './images/meera_sight.gif';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport wall_paper from \"./images/wallpaper_website.webp\"\n\nconst useStyles = makeStyles((theme) => ({\n  head_paper: {\n    flexWrap:'wrap',\n    alignContent:'center',\n    borderBottom:'solid',\n    borderBottomColor:'#6f226a',\n    borderBottomWidth:'0.5vh'\n  },\n  button: {\n    marginTop:'1vh'\n  },\n  header_button:{\n    borderRadius:'0',\n    backgroundColor:'#ffff',\n    paddingRight:'5vh',\n    paddingLeft:'5vh'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className=\"App\">\n      \n     <Paper elevation={3} className={classes.head_paper}>\n\n     <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Typography component=\"div\" style={{flexWrap:'wrap' }}>\n       <img src={Logo} style={{ height:'10vh', width:'20vh',marginTop:'1vh' }}/>\n      </Typography>\n      </Container>\n\n       <CssBaseline />\n      <Container>\n        <Typography component=\"div\" style={{flexWrap:'wrap' }}>\n\n        <div className={classes.button}>\n        <Button variant=\"outlined\" color=\"primary\" className={classes.header_button}>\n        HOME\n      </Button>\n      <Button variant=\"outlined\" className={classes.header_button} color=\"primary\">\n        SERVICES\n      </Button>\n      <Button variant=\"outlined\" className={classes.header_button} color=\"primary\">\n        BLOG\n      </Button>\n      <Button variant=\"outlined\" className={classes.header_button} color=\"primary\">\n        EVENTS\n      </Button>\n      <Button variant=\"outlined\" className={classes.header_button} color=\"primary\">\n      ABOUT\n      </Button>\n      <Button variant=\"outlined\" className={classes.header_button} color=\"primary\">\n        Contact us\n      </Button>\n    </div>\n        </Typography>\n      </Container>\n     </Paper>\n\n     <CssBaseline />\n      <Container>\n        <Typography component=\"div\" style={{flexWrap:'wrap' }}>\n          <img src={wall_paper} style={{width:'100%', height:'60vh'}}/>\n          </Typography>\n      </Container>\n\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}